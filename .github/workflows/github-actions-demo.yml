name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
# To use GitHub CLI in GitHub Actions workflow, we need to set the GH_TOKEN environment variable
env:
  GH_TOKEN: ${{ github.token }}

jobs:
  Unit-Tests:
    runs-on: ubuntu-latest
    outputs:
      pr-coverage-filename: ${{ steps.set-pr-coverage-filename.outputs.filename }}
      pr-coverage-artifact-id: ${{ steps.upload-pr-coverage-artifact.outputs.artifact-id }}
    steps:
      - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Python for branch
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies for branch
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Create .env file
        run: |
          echo "OPENWEATHER_API_KEY=some_key" >> .env
      - name: Set PR's coverage file name
        id: set-pr-coverage-filename
        run: |
          echo "filename=$(echo "${{ github.head_ref }}-coverage.lcov" | tr '/:<>|*?\\' '-')" >> $GITHUB_OUTPUT
      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=../weather-app --cov-report=lcov:${{ steps.set-pr-coverage-filename.outputs.filename }}
      - name: Upload PR's coverage report
        uses: actions/upload-artifact@v4
        id: upload-pr-coverage-artifact
        with:
          name: ${{ steps.set-pr-coverage-filename.outputs.filename }}
          path: ${{ steps.set-pr-coverage-filename.outputs.filename }}

  Coverage-Report:
    runs-on: ubuntu-latest
    needs: Unit-Tests
    steps:
      - name: Download PR's report
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.Unit-Tests.outputs.pr-coverage-filename }}
      - name: Get main coverage report artifact run id
        id: main-coverage-artifact
        run: |
          response=$(gh api repos/${{ github.repository }}/actions/artifacts?name=main-coverage.lcov)
          echo "run_id=$(echo "$response" | jq -r '.artifacts | sort_by(.created_at) | last | .workflow_run.id')" >> $GITHUB_OUTPUT
      - name: Download main report
        uses: actions/download-artifact@v4
        with:
          name: main-coverage.lcov
          run-id: ${{ steps.main-coverage-artifact.outputs.run_id }}
          github-token: ${{ github.token }}
      - name: Add comment with coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ github.token }}
          lcov-file: ${{ needs.Unit-Tests.outputs.pr-coverage-filename }}
          lcov-base: main-coverage.lcov
          delete-old-comments: true
          filter-changed-files: true
      - name: Delete existing reports for the PR
        if: ${{ needs.Unit-Tests.outputs.pr-coverage-artifact-id != '' }}
        run: |
          response=$(gh api repos/${{ github.repository }}/actions/artifacts?name=${{ needs.Unit-Tests.outputs.pr-coverage-filename }})
          echo "$response" | jq -c '.artifacts[]' | while read artifact; do
            artifact_id=$(echo "$artifact" | jq -r '.id')
            if [ "$artifact_id" != "${{ needs.Unit-Tests.outputs.pr-coverage-artifact-id }}" ]; then
              gh api --method DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id
            fi
          done

  Upload-Non-Existent-File:
    runs-on: ubuntu-latest
    steps:
      - name: Upload non-existent file
        id: upload-non-existent-file
        uses: actions/upload-artifact@v4
        with:
          name: non-existent-file.txt
          path: non-existent-file.txt
      - name: Check output
        run: |
          echo "Non-existent file uploaded: ${{ steps.upload-non-existent-file.outputs.artifact-id }}"
      - name: This will not run
        if: ${{ steps.upload-non-existent-file.outputs.artifact-id != '' }}
        run: |
          echo "This will not run"

  Call-Merge-Workflow:
    needs: Coverage-Report
    uses: ./.github/workflows/branch-merge.yml
