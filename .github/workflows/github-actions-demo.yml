name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

jobs:
  Coverage-Report:
    runs-on: ubuntu-latest
    steps:
      - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Python for branch
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies for branch
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Create .env file
        run: |
          echo "OPENWEATHER_API_KEY=some_key" >> .env
      - name: Rename coverage report for main branch
        run: |
          mv coverage.lcov coverage-base.lcov
      - name: Run tests with coverage
        run: |
          poetry run pytest --cov --cov-report=lcov:coverage.lcov
      - name: Upload coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ github.token }}
          lcov-file: coverage.lcov
          lcov-base: coverage-base.lcov
          delete-old-comments: true
          filter-changed-files: true
      - name: GitHub auth
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
      - name: Checkout PR branch
        run: |
          git fetch
          git checkout $(gh pr view ${{ github.event.pull_request.number }} --json headRefName -q '.headRefName')
      - name: Commit new coverage report
        if: github.event_name == 'pull_request'
        run: |
          git add coverage.lcov
          if ! git diff --cached --quiet; then
            git commit -m "Update coverage report"
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "No changes in coverage.lcov to commit."
          fi
  # Coverage-Report-Main:
  #   runs-on: ubuntu-latest
  #   needs: [Coverage-Report]
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v4
  #       with:
  #         ref: main
  #     - name: Set up Python for branch
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'
  #     - name: Install dependencies for branch
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install poetry
  #         poetry install
  #     - name: Create .env file
  #       run: |
  #         echo "OPENWEATHER_API_KEY=some_key" >> .env
  #     - name: Run tests with coverage
  #       run: poetry run pytest --cov --cov-report=lcov:coverage-base.lcov

  #     - name: Get coverage report
  #       run: |
  #         echo "${{ needs.Coverage-Report.outputs.coverage-report }}" | base64 -d > coverage.lcov
      

      # - name: Extract coverage percentage
      #   id: coverage
      #   run: |
      #     coverage=$(cat ./coverage.xml | grep -oP -m 1 'line-rate="\K[0-9.]+')
      #     rounded_coverage=$(printf "%.2f" $(echo "$coverage * 100" | bc))
      #     echo "Coverage after merging will be: **$rounded_coverage%**" > total_coverage.txt
      #     echo "\nPrevious coverage was: ${{ vars.TOgTAL_COVERAGE }}" >> total_coverage.txt
      #     # gh variable set TOTAL_COVERAGE --body $rounded_coverage
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Print coverage percentage
      #   uses: mshick/add-pr-comment@v2
      #   id: add-pr-comment
      #   with:
      #     message-path: |
      #       ./total_coverage.txt

      # - name: Extract coverage percentage
      #   id: coverage
      #   run: |
      #     coverage=$(cat ./coverage.xml | grep -oP -m 1 'line-rate="\K[0-9.]+')
      #     rounded_coverage=$(printf "%.2f" $(echo "$coverage * 100" | bc))
      #     echo "Coverage after merging will be: **$rounded_coverage%**" > total_coverage.txt
      #     echo "\nPrevious coverage was: ${{ vars.TOgTAL_COVERAGE }}" >> total_coverage.txt
      #     # gh variable set TOTAL_COVERAGE --body $rounded_coverage
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Print coverage percentage
      #   uses: mshick/add-pr-comment@v2
      #   id: add-pr-comment
      #   with:
      #     message-path: |
      #       ./total_coverage.txt

